% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat_table.R
\name{stat_table}
\alias{stat_table}
\alias{stat_table_set}
\alias{stat_table_assert}
\alias{as.stat_table}
\alias{as.stat_table.stat_table}
\alias{as.stat_table.data.table}
\alias{print.stat_table}
\alias{[.stat_table}
\alias{stat_table_setnames}
\alias{rbind.stat_table}
\title{\code{stat_table} Objects}
\usage{
stat_table_set(x, meta = NULL)

stat_table(x, meta = NULL)

stat_table_assert(x, x_nm = NULL, call = NULL, assertion_type = NULL)

as.stat_table(x, meta = NULL)

\method{as.stat_table}{stat_table}(x, meta = NULL)

\method{as.stat_table}{data.table}(x, meta)

\method{print}{stat_table}(x, ...)

\method{[}{stat_table}(x, ...)

stat_table_setnames(x, old, new, skip_absent = NULL)

\method{rbind}{stat_table}(...)
}
\arguments{
\item{x}{\itemize{
\item \code{stat_table}, \code{as.stat_table}, \code{stat_table_set}:
\verb{[data.table]} (mandatory, no default)
object to turn into a \code{stat_table}
\item other functions: \verb{[stat_table]} (mandatory, no default)
}}

\item{meta}{\verb{[NULL, list]} (default \code{NULL})

List of metadata for a \code{stat_table}. See documentation for
\code{stabli::stat_table_meta_set} for its definition.}

\item{x_nm}{See \verb{[dbc::handle_args_inplace]}.}

\item{call}{See \verb{[dbc::handle_args_inplace]}.}

\item{assertion_type}{See \verb{[dbc::handle_args_inplace]}.}

\item{...}{passed to next method (see \code{?"["})}

\item{old}{\verb{[character]} (no default)

See \verb{[data.table::setnames]}.}

\item{new}{\verb{[character]} (no default)

See \verb{[data.table::setnames]}.}

\item{skip_absent}{\verb{[NULL, logical]} (default \code{NULL})

See \verb{[data.table::setnames]}.
\itemize{
\item \code{NULL}: Use default defined in \verb{[data.table::setnames]}.
\item \code{logical}: Use this.
}}
}
\description{
Class \code{stat_table} methods and functions.
}
\section{Functions}{

\strong{stabli::stat_table_set}

Make a \code{data.table} into a \code{stat_table} without taking a copy.


\strong{stabli::stat_table}

Make a \code{data.table} into a \code{stat_table} by taking a copy.


\strong{stabli::stat_table_assert}

Assert that an object is a proper \code{stat_table} object. A \code{stat_table} must
pass these checks:
\itemize{
\item Must be of class \verb{$(stat_table_class_name()\}}.
\item Must have metadata that passes \code{stabli::stat_table_meta_assert}.
}


\strong{stabli::as.stat_table}

Make a \code{stat_table} object by taking a copy.


\strong{stabli::as.stat_table.stat_table}

Make a \code{stat_table} from another \code{stat_table} object by taking a copy.
If \code{is.null(meta)}, use the metadata from \code{x}.
Make a \code{stat_table} from a \code{data.table} object by taking a copy.


\strong{stabli::print.stat_table}

\code{print} method for class \code{stat_table}. Passes additional arguments via
\code{...} to the next method, i.e. \code{print.data.table}.


\strong{stabli::[.stat_table}

Subsetting / extraction method for class \code{stat_table}.


\strong{stabli::stat_table_setnames}

\code{stabli::stat_table_setnames} changes column names and updates \code{stat_table}
metadata to reflect the changes.


\strong{stabli::rbind.stat_table}

\code{rbind} method for class \code{stat_table}. Performs the following steps:
\itemize{
\item 
}
}

\examples{

# stabli::stat_table_set
st <- data.table::data.table(a = 1:3, v = 3:1)
stabli::stat_table_set(
  st,
  list(stratum_col_nms = "a", value_col_nms = "v")
)
stopifnot(identical(
  stabli::stat_table_meta_get(st)[["stratum_col_nms"]],
  "a"
))

# stabli::stat_table
st <- stabli::stat_table(
  data.table::data.table(a = 1:3, v = 3:1),
  list(
    stratum_col_nms = "a",
    value_col_nms = "v"
  )
)
stopifnot(identical(
  stabli::stat_table_meta_get(st)[["stratum_col_nms"]],
  "a"
))

# stabli::stat_table_assert
st <- stabli::stat_table(
  data.table::data.table(a = 1:3, v = 3:1),
  list(
    stratum_col_nms = "a",
    value_col_nms = "v"
  )
)
stat_table_assert(st)

# stabli::as.stat_table.stat_table
st <- stabli::as.stat_table(
  data.table::data.table(a = 1:3, v = 3:1),
  list(
    stratum_col_nms = "a",
    value_col_nms = "v"
  )
)
st <- stabli::as.stat_table(st)
stat_table_assert(st)

# stabli::as.stat_table.data.table
st <- stabli::as.stat_table(
  data.table::data.table(a = 1:3, v = 3:1),
  list(
    stratum_col_nms = "a",
    value_col_nms = "v"
  )
)
stat_table_assert(st)

# stabli::print.stat_table
st <- stabli::as.stat_table(
  data.table::data.table(a = 1:3, v = 3:1),
  list(
    stratum_col_nms = "a",
    value_col_nms = "v"
  )
)
print(st)

# stabli::`[.stat_table`
dt <- data.table::CJ(sex = 1:2, agegroup = 1:18)
dt[, "n" := sample(1e3L, .N)]
stabli::stat_table_set(
  dt,
  meta = list(
    stratum_col_nms = c("sex", "agegroup"),
    value_col_nms = "n"
  )
)

stopifnot(
  inherits(dt[1:3, ], class(dt)[1]),
  dt[1:3, sum(.SD[[1]]), .SDcols = "sex"] == 3
)

# stabli::stat_table_setnames
dt <- data.table::CJ(sex = 1:2, agegroup = 1:18)
dt[, "n" := sample(1e3L, .N)]
stabli::stat_table_set(
  dt,
  meta = list(
    stratum_col_nms = c("sex", "agegroup"),
    value_col_nms = "n"
  )
)
stabli::stat_table_setnames(dt, c("sex", "n"), c("my_sex", "my_n"))
stopifnot(
  c("my_sex", "my_n") \%in\% names(dt),
  "my_sex" \%in\% stabli::stat_table_meta_get(dt)[["stratum_col_nms"]],
  "my_n" \%in\% stabli::stat_table_meta_get(dt)[["value_col_nms"]]
)

# stabli::rbind.stat_table
st1 <- stabli::stat_table(data.table::data.table(
  a = 1:3,
  v = 3:1
), list(stratum_col_nms = "a", value_col_nms = "v"))
st2 <- stabli::stat_table(data.table::data.table(
  b = 1:3,
  v = 3:1
), list(stratum_col_nms = "b", value_col_nms = "v"))
big_st <- rbind(st1, st2, use.names = TRUE, fill = TRUE)
stopifnot(
  nrow(big_st) == nrow(st1) + nrow(st2),
  identical(stabli::stat_table_meta_get(big_st)[["stratum_col_nms"]],
            c("a", "b"))
)
}
