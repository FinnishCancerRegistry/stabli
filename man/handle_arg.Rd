% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/argument_handling.R
\name{handle_arg}
\alias{handle_arg}
\alias{assert_is_arg_by_style}
\alias{assert_is_arg_subset}
\alias{assert_is_arg_by}
\alias{handle_arg_subset}
\alias{handle_arg_by}
\alias{handle_arg_by_style}
\alias{handle_arg_by_et_subset_et_by_style_inplace}
\title{Argument Handling}
\usage{
assert_is_arg_by_style(x, x_nm = NULL, call = NULL, assertion_type = NULL)

assert_is_arg_subset(
  x,
  x_nm = NULL,
  call = NULL,
  assertion_type = NULL,
  dataset = NULL
)

assert_is_arg_by(
  x,
  x_nm = NULL,
  call = NULL,
  assertion_type = NULL,
  dataset = NULL
)

handle_arg_subset(
  arg_subset_nm = "subset",
  dataset_nm = "dataset",
  output_type = c("logical", "integer", "as-is")[1],
  eval_env = NULL,
  calling_env = NULL,
  call = NULL,
  assertion_type = NULL
)

handle_arg_by(by, dataset, assertion_type = NULL)

handle_arg_by_style(by_style, assertion_type = NULL)

handle_arg_by_et_subset_et_by_style_inplace(
  handle_arg_nms = NULL,
  dataset_nm = "dataset",
  arg_by_nm = "by",
  arg_subset_nm = "subset",
  arg_by_style_nm = "by_style",
  eval_env = NULL,
  calling_env = NULL,
  call = NULL,
  assertion_type = NULL
)
}
\arguments{
\item{x}{Object to inspect.}

\item{x_nm}{See \verb{[dbc::handle_args_inplace]}.}

\item{call}{See \verb{[dbc::handle_args_inplace]}.}

\item{assertion_type}{See \verb{[dbc::handle_args_inplace]}.}

\item{dataset}{\verb{[NULL, data.table]} (default \code{NULL})

This can be supplied to perform additional checks.
\itemize{
\item \code{NULL}: No additional checks.
\item \code{data.table}: See section \strong{Functions}.
}}

\item{arg_subset_nm}{\verb{[character]} (default \code{"subset"})

Name of subsetting argument in your statistics function.}

\item{dataset_nm}{\verb{[character]} (default \code{"dataset"})

Name of dataset in your statistics function.}

\item{output_type}{\verb{[character]} (default \code{"logical"})

Type of output to return regardless of what results from evaluating the
subset argument
\itemize{
\item \code{logical}: Output is a vector of \code{TRUE} / \code{FALSE} values indicating rows
in the dataset to be used in the analysis.
\item \code{integer}: Row numbers of the dataset.
\item \code{as-is}: Whatever your subset argument results in, that is returned.
}}

\item{eval_env}{\verb{[NULL, environment]} (default \code{NULL})

Environment where the subset argument and dataset reside.
So these must exist: \code{eval_env[[arg_subset_nm]]} and
\code{eval_env[[dataset_nm]]}.
\itemize{
\item \code{NULL}: Use the environment where this function is called from.
Unless you are doing something unusual then this is correct.
\item \code{environment}: Some other environment.
}}

\item{calling_env}{\verb{[NULL, environment]} (default \code{NULL})

Environment where the statistical function you have written is called from.
\itemize{
\item \code{NULL}: Use \code{parent.frame(2L)}.
Unless you are doing something unusual then this is correct.
\item \code{environment}: Some other environment.
}}

\item{by}{\verb{[NULL, data.table, character, list]} (default \code{NULL})

Determines stratification:
\itemize{
\item \code{NULL}: No stratification.
\item \code{data.table}: Use this exact stratification.
\item \code{character}: Stratify by these columns in the dataset.
\item \code{list}: Combine elements into one big \code{data.table} and use that as
stratification.
}}

\item{by_style}{Passed to \code{stabli::assert_is_arg_by_style}.}

\item{handle_arg_nms}{\verb{[NULL, character]} (default \code{NULL})

Names of arguments to handle.
\itemize{
\item \code{NULL}: Handle all, i.e. \code{c("by", "by_style", "subset")}.
\item \code{character}: Handle only these, subset of
\code{c("by", "by_style", "subset")}.
}}

\item{arg_by_nm}{\verb{[character]} (default \code{"by"})

Name of your stratification argument.}

\item{arg_by_style_nm}{\verb{[character]} (default \code{"by_style"})

Name of your stratification style argument.}
}
\description{
Handle typical input arguments used in statistical functions.
}
\section{Functions}{

\strong{stabli::assert_is_arg_by_style}

\code{stabli::assert_is_arg_by_style} runs assertions on its input.
\code{by_style} must be either \code{NULL} or one of
\code{c("keep_empty", "drop_empty")}.


\strong{stabli::assert_is_arg_subset}

\code{stabli::assert_is_arg_subset} performs assertions on its input.
\code{subset} must have one of classes
\code{c("NULL", "integer", "logical", "data.table")}.
If \code{dataset} was supplied, additional checks are performed:
\itemize{
\item \code{logical} class \code{subset} must be of length \code{nrow(dataset)}.
\item \code{integer} class \code{subset} must contain valid indices into \code{dataset}
between \code{-nrow(dataset)} and \code{nrow(dataset)}.
\item \code{data.table} class \code{subset} must have only column names found also in
\code{dataset}.
}


\strong{stabli::assert_is_arg_by}

\code{stabli::assert_is_arg_by} performs assertions on its input:
\itemize{
\item \code{by} must have one of classes
\code{c("NULL", "data.table", "character", "list")}.
\item \code{by} of class \code{list}: Every element must be a vector of some kind, a
\code{data.table}, or \code{NULL}. Vector elements must be named.
\item If \code{dataset} is supplied, additional checks are performed depending on
the class of \code{by}:
\itemize{
\item \code{data.table}: All column names must also exist in \code{dataset}.
\item \code{character}: All elements must be column names of \code{dataset}.
\item \code{list}: Names of vector-class elements and names of
\code{data.table}-class elements' columns must be column names
of \code{dataset}.
}
}


\strong{stabli::handle_arg_subset}
\itemize{
\item Your subsetting expression --- determined via \code{arg_subset_nm} --- is
collected as a language object (see e.g. \code{?is.call}).
\item The expression is evaluated with your dataset --- identified via
\code{dataset_nm} --- and \code{calling_env}. See \code{?eval}.
\item If \code{output_type == "as-is"}, return what the result.
\item Otherwise turn a result of type \code{data.table}, \code{integer}, \code{logical}, or
\code{NULL} into an \code{integer} or \code{logical} type as requested.
\item Return converted result.
}


\strong{stabli::handle_arg_by}

\code{stabli::handle_arg_by} turns various types of input into a single
\code{data.table} containing strata in a dataset. Performs the following steps:
\itemize{
\item Check \code{by} against \code{dataset} using \code{stabli::assert_is_arg_by}.
\item If \code{by} is a \code{data.table}, it is only checked against \code{dataset}.
\item If \code{by} is a \code{character} vector, collect those columns from \code{dataset}
into a \code{data.table}. Drop duplicated strata.
\item If \code{by} is a \code{list} of \code{data.table} / vector elements,
combine its elements into one big \code{data.table}.
The big \code{data.table} is created by first determining indices into each
element of the \code{list} using \code{data.table::CJ} on e.g.
\code{list(seq_along(x[[2]]), seq_len(nrow(x[[2]])))}. Then the corresponding
values are added into the big \code{data.table}.
}


\strong{stabli::handle_arg_by_style}

\code{stabli::handle_arg_by_style} runs assertions on \code{by_style}. It returns
\code{by_style} as-is except \code{by_style = NULL} causes
\code{"by_style_options()[1]"} to be returned.


\strong{stabli::handle_arg_by_et_subset_et_by_style_inplace}

\code{stabli::handle_arg_by_et_subset_et_by_style_inplace} calls
\code{stabli::handle_arg_by}, \code{stabli::handle_arg_by_style}, and
\code{stabli::handle_arg_subset}. Their results are placed into \code{eval_env},
so by default e.g. your \code{subset} object is replaced by output of
\code{stabli::handle_arg_subset}.
}

\section{News for version 0.3.0}{


New function \code{stabli::assert_is_arg_by_style}.



New function \code{stabli::assert_is_arg_subset}.



New function \code{stabli::assert_is_arg_by}.



New function \code{stabli::handle_arg_subset}.



New function \code{stabli::handle_arg_by}.



New function \code{stabli::handle_arg_by_style}.



New function \code{stabli::handle_arg_by_et_subset_et_by_style_inplace}.
}

\section{News for version 0.4.0}{


\code{stabli::handle_arg_by_et_subset_et_by_style_inplace} gains argument
\code{handle_arg_nms}.
}

