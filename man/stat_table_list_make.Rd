% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat_table_list_make.R
\name{stat_table_list_make}
\alias{stat_table_list_make}
\alias{stat_table_list_make_from_settings}
\alias{stat_table_make_from_by_list}
\title{\code{tab_list}}
\usage{
stat_table_list_make_from_settings(
  dataset,
  settings,
  optional_steps = NULL,
  harmonisation_vame = NULL,
  stratification_vame = NULL
)

stat_table_make_from_by_list(
  fun_nm,
  dataset,
  by_list,
  subset = NULL,
  by_style = NULL,
  arg_list = NULL,
  optional_steps = NULL,
  harmonisation_vame = NULL,
  stratification_vame = NULL
)
}
\arguments{
\item{dataset}{\verb{[data.table]} (no default)

The main dataset.}

\item{settings}{\verb{[data.table]} (no default)

The settings table. We effectively pass each row of this table to
\code{stabli::stat_table_make_from_by_list}. Must have columns
\itemize{
\item \code{tab_nm} \verb{[character]}: Name of the table in the produced list.
E.g. \code{"count_time_series"}. Not passed to
\code{stabli::stat_table_make_from_by_list} but used to determine name of
output element.
\item \code{fun_nm} \verb{[character]}: Each \code{settings[["fun_nm"]][i]} is passed.
E.g. \code{"mypkg::myfun"}.
\item \code{by_list} \verb{[list]}: Each
\code{settings[["by_list"]][[i]]} passed.
\item \code{arg_list} \verb{[character, list]}: Each
\code{settings[["arg_list"]][i]} or \code{settings[["arg_list"]][[i]]} passed.
}}

\item{optional_steps}{\verb{[NULL, list]} (default \code{NULL})
\itemize{
\item \code{NULL}: No additional optional steps are run.
\item \code{list}: This named list of functions is used to perform optional steps
during run. See detailed description of steps performed by function
to see how this can be used.
}}

\item{harmonisation_vame}{\verb{[NULL, VariableMetadata]} (default \code{NULL})

Contains metadata for harmonising results.
See \code{?vame::VariableMetadata}.
\itemize{
\item \code{NULL}: No harmonisation attempted.
\item \code{VariableMetadata}:
See the detailed description of \code{stabli::stat_table_make_from_by_list}.
}}

\item{fun_nm}{\verb{[character]} (no default)

Must be the name of a function, e.g. \code{"my_fun"}, \code{"mypkg::my_fun"}.
The function must return a \code{data.table} with the additional class
\code{stat_table} --- see \verb{[stat_table_set]}.}

\item{by_list}{\verb{[list]} (no default)

Each element is a passed in turn to function named \code{fun_nm}
as argument \code{by}.}

\item{subset}{Handled by \verb{[handle_arg_by_et_subset_et_by_style_inplace]}.}

\item{by_style}{Handled by \verb{[handle_arg_by_et_subset_et_by_style_inplace]}.}

\item{arg_list}{\verb{[NULL, list]} (default \code{NULL})

Additional arguments to pass to function named \code{fun_nm}.
\itemize{
\item \code{NULL}: Don't pass additional arguments.
\item \code{list}: These arguments will be included in call to \code{fun_nm}.
See detailed description of steps performed to see how this works.
}}
}
\value{
\strong{stabli::stat_table_list_make_from_settings}

Returns a \code{stat_table_list}.

\strong{stabli::stat_table_make_from_by_list}

Returns a \code{data.table} with the additional class \code{stat_table}.
}
\description{
Functions related to \code{tab_list}.
}
\section{Functions}{

\strong{stabli::stat_table_list_make_from_settings}

Performs the following steps:
\itemize{
\item Calls \code{optional_steps[["on_entry"]](env = main_fun_env)} if that
\code{optional_steps} element exists. \code{main_fun_env} is the temporary evaluation
environment of \code{stabli::stat_table_list_make_from_settings}.
\item Calls \code{on.exit(optional_steps[["on_exit"]](env = main_fun_env))} if that
\code{optional_steps} element exists.
\item \code{lapply}'s through row numbers of \code{settings}. For each \code{i}:
\itemize{
\item Calls \code{optional_steps[["lapply_on_entry"]](env = lapply_fun_env)} if
that \code{optional_steps} element exists. \code{lapply_fun_env} is the evaluation
environment of the anonymous function used in the \code{lapply} call.
\item Calls \code{on.exit(optional_steps[["lapply_on_exit"]](env = lapply_fun_env))}
if that \code{optional_steps} element exists.
\item Collects \code{arg_list} for calling \code{stabli::stat_table_make_from_by_list}.
\code{settings[["arg_list"]][i]}
is parsed and evaluated if it is of class \code{character}. If it is a
quoted expression it is also evaluated first. The evaluation
environment is the environment where
\code{stabli::stat_table_list_make_from_settings} is called. The result of the evaluation
must be a \code{list} or \code{NULL}. Otherwise each
\code{settings[["arg_list"]]} element must be a \code{list} or \code{NULL}.
\item Calls \code{optional_steps[["lapply_pre_stat_fun_call"]](env = lapply_fun_env)}
if that \code{optional_steps} element exists.
\item Calls \code{stabli::stat_table_make_from_by_list} with \code{arg_list}.
\item Calls \code{optional_steps[["lapply_post_stat_fun_call"]](env = lapply_fun_env)}
if that \code{optional_steps} element exists.
\item Asserts that the produced object is of class \code{stat_table}.
See \verb{[stat_table]}.
}
\item Sets the names of the list produced by \code{lapply} to
\code{settings[["tab_nm"]]}.
\item Calls \code{stabli::stat_table_list_set} with
\code{meta = list(meta_dt = settings)} --- without column \code{tab_nm}.
}

Returns a \code{stat_table_list}.


\strong{stabli::stat_table_make_from_by_list}

\code{stabli::stat_table_make_from_by_list} performs the following steps:
\itemize{
\item Run \code{optional_steps[["on_entry"]](env = main_env)} if that \code{optional_steps} element
exists. \code{main_env} is the evaluation environment of
\code{stabli::stat_table_make_from_by_list}.
\item Run \code{on.exit(optional_steps[["on_exit"]](env = main_env))} if that
\code{optional_steps} element exists.
\item Run \code{stabli::handle_arg_by_et_subset_et_by_style_inplace}.
\item Run \code{optional_steps[["pre_lapply"]](env = main_env)} if that \code{optional_steps}
element exists.
\item Run \code{lapply} on \code{by_list}. For each element
\itemize{
\item Run \code{optional_steps[["lapply_on_entry"]](env = anon_fun_env)}
if that \code{optional_steps} element exists. \code{anon_fun_env} is the
evaluation environment of the anonymous function passed to
\code{lapply} defined in the body of
\code{stabli::stat_table_make_from_by_list}.
\item Run \code{on.exit(optional_steps[["lapply_on_exit"]](env = anon_fun_env))}
if that \code{optional_steps} element exists.
\item Create argument list \code{arg_list} for calling function named
\code{fun_nm}. It is created by collecting \code{dataset}, \code{subset}, \code{by}
(current element of \code{by_list}), and
\code{by_style} into a list, and by appending
\code{arg_list} to it. \code{by} is additionally processed by
\code{stabli::handle_arg_by}.
Only those elements of \code{arg_list} are kept whose names are
argument names of \code{fun_nm}.
\item \code{arg_list[["by"]]} is turned into a
\code{data.table} with \code{stratification_vame@vame_category_space_dt} if
\code{stratification_vame} is not \code{NULL} and if \code{arg_list[["by"]]} was
a vector of column names.
\item If \code{arg_list[["by"]]} is at this point a \code{data.table} and
contains any \code{NA} strata, those \code{NA} strata are dropped.
\code{arg_list[["by"]]} contains \code{NA} strata at least if \code{stratification_vame}
allows for \code{NA} values for \code{by}.
\item Run \code{optional_steps[["lapply_pre_stat_fun_call"]](env = anon_fun_env)}
if that \code{optional_steps} element exists.
\item Run \code{do.call(fun_nm, arg_list, quote = TRUE)}.
\item Run \code{optional_steps[["lapply_post_stat_fun_call"]](env = anon_fun_env)}
if that \code{optional_steps} element exists.
\item Call \code{harmonisation_vame@vame_harmonise_dt} on the
partial statistics table if \code{harmonisation_vame} was not \code{NULL}.
}
\item Run \code{optional_steps[["post_lapply"]](env = main_env)}
if that \code{optional_steps} element exists.
\item Call \code{stabli::stat_table_set}.
}

Returns a \code{data.table} with the additional class \code{stat_table}.
}

\section{News for version 0.1.0}{


New exported fun \verb{[stabli::stat_table_list_make_from_settings]}.
}

